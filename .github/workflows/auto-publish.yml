name: Auto Publish

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  publish:
    name: Publish for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      deployments: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
          override: true

      - name: Install cross
        if: matrix.job.use-cross
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cross

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package as a release asset
        shell: bash
        run: |
          PKG_BASENAME=phi-backend-rust-${{ env.VERSION }}-${{ matrix.target }}
          PKG_NAME=${PKG_BASENAME}.tar.gz
          ASSET_PATH=target/${{ matrix.target }}/release/
          BINARY_NAME=phi-backend-rust
          
          # For Windows, change binary extension
          if [[ ${{ matrix.target }} == *windows* ]]; then
            BINARY_NAME=phi-backend-rust.exe
          fi
          
          # Create tarball
          tar -czf ${PKG_NAME} -C ${ASSET_PATH} ${BINARY_NAME}
          echo "PKG_NAME=${PKG_NAME}" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.ref_name }}/assets?name=${{ env.PKG_NAME }}
          asset_path: ./${{ env.PKG_NAME }}
          asset_name: ${{ env.PKG_NAME }}
          asset_content_type: application/gzip

      - name: Build Debian package (Linux only)
        if: matrix.job.os == 'ubuntu-20.04' && !matrix.job.use-cross
        run: |
          # Create directory structure
          mkdir -p phi-backend-rust-${{ env.VERSION }}/usr/bin
          mkdir -p phi-backend-rust-${{ env.VERSION }}/usr/share/doc/phi-backend-rust
          mkdir -p phi-backend-rust-${{ env.VERSION }}/DEBIAN
          
          # Copy binary
          cp target/${{ matrix.job.target }}/release/phi-backend-rust phi-backend-rust-${{ env.VERSION }}/usr/bin/
          
          # Create control file
          cat > phi-backend-rust-${{ env.VERSION }}/DEBIAN/control << EOF
          Package: phi-backend-rust
          Version: ${{ env.VERSION }}
          Section: base
          Priority: optional
          Architecture: amd64
          Maintainer: ${{ github.repository_owner }}
          Description: Phi Backend Rust service
          EOF
          
          # Build .deb package
          sudo dpkg-deb --build phi-backend-rust-${{ env.VERSION }}
          
          # Set env var for upload
          echo "DEB_PKG=phi-backend-rust-${{ env.VERSION }}.deb" >> $GITHUB_ENV

      - name: Upload Debian package (Linux only)
        if: matrix.job.os == 'ubuntu-20.04' && !matrix.job.use-cross
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.ref_name }}/assets?name=${{ env.DEB_PKG }}
          asset_path: ./${{ env.DEB_PKG }}
          asset_name: phi-backend-rust-${{ env.VERSION }}-amd64.deb
          asset_content_type: application/vnd.debian.binary-package